@rendermode InteractiveServer
@inject IUsuarioServices UsuarioServices
@attribute [StreamRendering]
@inject IToastService toastService
@inject IUsuarioServices UsuarioServices
@inject IVendaServices VendaServices
@inject NavigationManager NavigationManager
@using Blazored.Toast.Configuration
@using Blazored.Typeahead
@using System.Globalization

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.Material"
                InfoIcon="school"
                WarningIcon="warning" />

@if (carregando)
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true"/>
}
else
{

<ModalDeConfirmacao @ref="modalConfirmacao" onCancela="() => modalConfirmacao.Ocultar()" onConfirma="() => DeletarUsuario(idUsuarioDeletar)" Titulo="Deletar Usuario">
    Deseja realmente deletar este usuario?
</ModalDeConfirmacao>

    @if (modalTransacoes)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal" tabindex="-1" role="dialog"
             arial-hidden="true" style="display:block;">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">

                    <MudDataGrid T="Venda" Filterable="true" Hideable="true" Items="@VendasDoUsuario">
                        <Columns>
                            <PropertyColumn Property="x => x.Numero" Title="N° da venda" Sortable="false" Filterable="false" />
                            <PropertyColumn Property="x => x.Total" Sortable="false" Filterable="false" Format="C" />
                            <PropertyColumn Property="x => x.Descontos" Sortable="false" Filterable="false" Format="C" />
                            <PropertyColumn Property="x => x.NomeDoUsuario" Title="Vendedor" Sortable="false" Filterable="false" />
                            <PropertyColumn Property="x => x.NomeDoCliente" Title="Cliente" Sortable="false" Filterable="false" />
                            <PropertyColumn Property="x => x.DataDaVenda" Title="Data" Filterable="false" />
                        </Columns>
                    </MudDataGrid>
                    <MudButton OnClick="AbrirOuFecharModal1" Color="Color.Info" Variant="Variant.Filled">OK</MudButton>
                </div>
            </div>
        </div>
    }

<MudContainer Class="mt-2" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem sm="12" xs="12" xl="12" md="12">
            <MudPaper Elevation="2" Class="pa-4">
                @if (usuarios.Count == 0)
                {
                    <h5>Nenhum usuário cadastrado.</h5>
                }
                else
                {
                    <MudExpansionPanels Elevation="0">
                        @foreach (var item in usuarios)
                        {
                            <MudExpansionPanel Text="@item.Email">
                                @foreach (var perfil in item.PerfisDesteUser)
                                {
                                    <MudPaper Elevation="0" Class="d-flex">
                                        <h7 class="mt-4" style="color:#1B3B6F;">@perfil.Nome</h7>
                                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="() => RemoverPerfilDoUsuario(perfil.Nome,item.Id)" />
                                    </MudPaper>
                                }
                                <MudButton OnClick="() => AbrirModalDelete(item.Id)" Color="Color.Error">Deletar Usuario</MudButton>
                                <MudButton OnClick="() => porcent(item.Id)" Color="Color.Info">Alterar porcentagem</MudButton>
                                <h7>@(string.Format("{0:p}", item.porcentagemUsuario))</h7>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }
            </MudPaper>
        </MudItem>

        <MudItem sm="6" xs="12" xl="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                @if (alterarPorcent)
                {
                    <div>
                        <label>Porcentagem</label>
                        <InputNumber @bind-Value="porcentUsuario" class="form-control"></InputNumber>
                    </div>
                    <MudButton OnClick="() => AlterarPorcentagem()">Gravar</MudButton>
                }
                else
                {
                    <div>
                        <label>Email</label>
                        <InputText @bind-Value="novoUsuarioEmail" class="form-control"></InputText>
                    </div>
                    <div>
                        <label>Senha</label>
                        <InputText type="password" @bind-Value="novoUsuarioSenha" class="form-control"></InputText>
                    </div>
                    <div>
                        <label>Desconto Max.</label>
                        <InputNumber @bind-Value="porcentUsuario" class="form-control"></InputNumber>
                    </div>
                    <MudButton OnClick="() => CadastrarNovoUsuario()">Gravar</MudButton>
                }
                
            </MudPaper>
        </MudItem>

        <MudItem sm="12" xs="12" xl="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="py-2">
                    <InputSelect class="form-control" @bind-Value="usuarioId">
                        <option selected>Selecione um usuário</option>
                        @foreach (var item in usuarios)
                        {
                            <option value="@item.Id">@item.Email</option>
                        }
                    </InputSelect>
                </div>
                <div class="py-2">
                    <InputSelect class="form-control" @bind-Value="novoPerfilUsuario">
                        <option selected>Selecione um perfil.</option>
                        @foreach (var item in perfis)
                        {
                            <option value="@item.Nome">@item.Nome</option>
                        }
                    </InputSelect>
                </div>
                <MudButton OnClick="() => GravarPerfilDoUsuario()">Gravar</MudButton>
            </MudPaper>
        </MudItem>

         <MudItem sm="12" xs="12" xl="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <h4 class="d-flex justify-content-center">Comissão</h4>
                <hr/>
                    <MudPaper Elevation="0" Class="pa-4 d-flex">
                        <MudDatePicker Class="mx-2" PickerVariant="PickerVariant.Dialog" Color="Color.Tertiary" @bind-Date="primeiroDiaDoMes" Label="Data Inicial" />
                        <MudDatePicker Class="mx-2" PickerVariant="PickerVariant.Dialog" Color="Color.Tertiary" @bind-Date="ultimoDiaDoMes" Label="Data Final" />
                        <MudButton OnClick="BuscaVendas">APLICAR</MudButton>
                    </MudPaper>
                <hr/>
                <div class="table-responsive">
                    <table class="table">
                            <thead class="table-light">
                            <tr>
                                <th>Nome</th>
                                <th>Total de vendas</th>
                                <th>Comissão</th>
                                <th>% base</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                                @foreach (var item in usuariosCalculos)
                                {
                                    <tr>
                                        <td>@item.Nome</td>
                                        <td>@item.TotalVendas</td>
                                        <td>@item.Comissao.ToString("0.00")</td>
                                        <td>
                                            <div>
                                                <InputNumber @onblur="AtualizaComissao" @bind-Value="item.Calculo" class="form-control w-25"></InputNumber>
                                            </div>
                                        </td>
                                        <td><MudIconButton Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => VerVendasUsuario(item.Nome)" /></td>
                                    </tr>
                                }
                        </tbody>
                    </table>
                </div>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>
}

@code {
    bool carregando = true;
    List<Usuario> usuarios = new List<Usuario>();
    List<PerfilUsuario> perfis = new List<PerfilUsuario>();
    List<UsuarioComissao> usuariosCalculos = new List<UsuarioComissao>();
    List<Venda> Vendas = new List<Venda>();
    List<Venda> VendasDoUsuario = new List<Venda>();

    ModalDeConfirmacao modalConfirmacao;
    string idUsuarioDeletar { get; set; }

    public string novoPerfilUsuario { get; set; }
    public string usuarioId { get; set; }

    public string novoUsuarioEmail { get; set; }
    public string novoUsuarioSenha { get; set; }
    public decimal porcentUsuario { get; set; }
    public bool alterarPorcent = false;

    public DateTime? primeiroDiaDoMes { get; set;}
    public DateTime? ultimoDiaDoMes { get; set; }
    bool modalTransacoes = false;

    protected override async Task OnInitializedAsync()
    {
        bool usuarioAtivo = await UsuarioServices.GetUsuarioAtivo();
        if (!usuarioAtivo) NavigationManager.NavigateTo("/pagamento");
        carregando = true;
        await AtualizaInfo();
        DateTime hoje = DateTime.Now;
        primeiroDiaDoMes = new DateTime(hoje.Year, hoje.Month, 1);
        ultimoDiaDoMes = primeiroDiaDoMes.Value.AddMonths(1).AddDays(-1);
        await BuscaVendas();
        carregando = false;

    }

    public void AbrirOuFecharModal1() => modalTransacoes = !modalTransacoes;
    public void VerVendasUsuario(string nome)
    {
        VendasDoUsuario = Vendas.Where(x => x.NomeDoUsuario == nome).ToList();
        AbrirOuFecharModal1();
    }

    public async Task AtualizaInfo()
    {
        usuarios = await UsuarioServices.GetUsuariosDependentes();
        perfis = await UsuarioServices.GetPerfils();
        PerfilUsuario perfil = perfis.FirstOrDefault(x => x.Nome == "EasyAdmin");
        perfis.Remove(perfil);
        StateHasChanged();
    }

    public async Task RemoverPerfilDoUsuario(string nomePerfil, string idUsuario)
    {
        await UsuarioServices.DeletePerfilDoUsuario(nomePerfil, idUsuario);
        await AtualizaInfo();
    }

    public async Task CadastrarNovoUsuario()
    {
        Usuario usuario = new();
        usuario.Email = novoUsuarioEmail;
        usuario.Senha = novoUsuarioSenha;
        if (porcentUsuario == null || porcentUsuario == 0)
        {
            usuario.porcentagemUsuario = 0;
        }
        else
        {
            usuario.porcentagemUsuario = porcentUsuario / 100;
        }

        bool novoUsuario = await UsuarioServices.AddUsuárioDependente(usuario);
        await AtualizaInfo();

        usuario.Email = null;
        usuario.Senha = null;

        if (novoUsuario)
        {
            toastService.ShowSuccess("Usuario Cadastrado com sucesso.");
        }
        else
        {
            toastService.ShowError("O limite de usuários cadastrados foi atingido.");
        }
    }

    public void AbrirModalDelete(string id)
    {
        modalConfirmacao.Exibir();
        idUsuarioDeletar = id;
    }

    public async Task DeletarUsuario(string id)
    {
        await UsuarioServices.DeletarUsuario(id);
        await AtualizaInfo();
    }

    public async Task GravarPerfilDoUsuario()
    {
        await UsuarioServices.AtualizarPerfilUsuario(usuarioId, novoPerfilUsuario);
        await AtualizaInfo();
        novoPerfilUsuario = null;
        usuarioId = null;
    }

    public void porcent(string id ) 
    {
        usuarioId = id;
        alterarPorcent = true;
    }

    public async Task AlterarPorcentagem()
    {
        if (porcentUsuario == null || porcentUsuario == 0)
        {
            porcentUsuario = 0;
        }
        else
        {
            porcentUsuario = porcentUsuario / 100;
        }
        await UsuarioServices.AtualizarPorcentagemUsuario(usuarioId, porcentUsuario);
        alterarPorcent = false;
    }

    public class UsuarioComissao
    {
        public string Id { get; set; }
        public string Nome { get; set; }
        public decimal TotalVendas { get; set; }
        public decimal Comissao { get; set; }
        public decimal Calculo { get; set; }
    }

    public void GeraUsuariosComissao()
    {

        foreach (var item in usuarios)
        {
            UsuarioComissao userComissao = new();
            userComissao.Nome = item.Email;
            userComissao.Id = item.Id;
            userComissao.TotalVendas = 0;
            userComissao.Calculo = 0;
            userComissao.Comissao = 0;
            foreach (var i in Vendas)
            {
                if (i.NomeDoUsuario == userComissao.Nome) { userComissao.TotalVendas += (decimal)i.Total - (decimal)i.Descontos; }
            }
            usuariosCalculos.Add(userComissao);
        }
    }
    public async Task BuscaVendas()
    {
        usuariosCalculos.Clear();
        Vendas = await VendaServices.ObterVendasPorDataAsync(primeiroDiaDoMes, ultimoDiaDoMes);
        GeraUsuariosComissao();
    }
    public void AtualizaComissao()
    {
        foreach (var item in usuariosCalculos)
        {
            item.Comissao = item.TotalVendas * (item.Calculo / 100);
        }
    }
}
