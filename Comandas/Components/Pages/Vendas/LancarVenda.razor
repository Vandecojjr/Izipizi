@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IToastService toastService
@inject IProdutoServices ProdutoServices
@inject IVendaServices VendaServices
@inject IMetodoDePagamentoServices MetodoDePagamentoServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICaixaServices CaixaServices
@inject IUsuarioServices UsuarioServices
@inject IClienteServices ClienteServices
@inject IEmAbertoServices EmabertoServices
@inject IJSRuntime JSRuntime

@using Blazored.Toast.Configuration
@using Blazored.Typeahead

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.Material"
                InfoIcon="school"
                WarningIcon="warning" />


@if (carregando)
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true"/>
}
else
{
@* Modal para a confirmação de exlusção do item lancado. *@

<ModalDeConfirmacao @ref="modalConfirma" onCancela="() => modalConfirma.Ocultar()" onConfirma="() => RemoverItemDaListaDeVendas(idDoItemAserDeletado)">
    <h6>Deseja deletar este item?</h6>
</ModalDeConfirmacao>

@* --------------------------------------------- *@



@if (bloqueioModal && caixaAtual == null)
{
    <ModalDeBloqueio Titulo="Abra o caixa antes de realizar uma venda"
                     onCancela="@(()=> NavigationManager.NavigateTo("/"))"
                     onConfirma="@(()=> NavigationManager.NavigateTo("/caixa"))">
        Por favor abra o caixa para esta operação.
    </ModalDeBloqueio>
}
else if (bloqueioModal)
{
    <ModalDeBloqueio Titulo="Cadastre um Metodo de pagamento"
                     onCancela="@(()=> NavigationManager.NavigateTo("/produtos"))"
                     onConfirma="@(()=> NavigationManager.NavigateTo("/configuracoes"))">
        Por favor cadastre Pelomenos um metodo de pagamento
    </ModalDeBloqueio>
}

@* Modal para o fechamento de venda. *@



    @if (modalDeixarEmAberto)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal" tabindex="-1" role="dialog"
             arial-hidden="true" style="display:block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Nova conta</h2>
                    </div>
                    <div class="modal-body">
                        <div>
                            <label>Comanda</label>
                            <InputSelect class="form-control" @bind-Value="numeroDaContaEmAberto">
                                <option value="0">Selecione uma comanda</option>
                                @foreach (var item in ContasEmAberto)
                                {
                                     <option value="@item.Numero">@item.Numero  -  (@item.Nome)</option>
                                }
                            </InputSelect>
                        </div>
                        <div>
                            <label>Vendedor</label>
                            <InputSelect class="form-control" @bind-Value="vendedor">
                                <option value="null">Selecione uma comanda</option>
                                @foreach (var item in usuarios)
                                {
                                    <option value="@item.Email">@item.Email</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="modal-footer">
                                <MudButton OnClick="DeixarEmAberto" Class="mx-3" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error">Aplicar</MudButton>
                                <MudButton OnClick="AbrirFecharModalDeixarEmAberto" Variant="Variant.Filled">Cancelar</MudButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }

@if (modalNovoCliente)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal" tabindex="-1" role="dialog"
             arial-hidden="true" style="display:block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h6 class="modal-title">Adicionar Cliente</h6>
                    </div>
                    <div class="modal-body">
                        <div>
                            <label>Nome</label>
                            <InputText class="form-control" @bind-Value="NovoCliente.Nome"></InputText>
                            @if (mostrarErroCadastroDeCliente)
                            {
                                <h7 class="text-danger">@erroCadastroDeCliente</h7>
                            } 
                        </div>
                        <div>
                            <label>Limite</label>
                            <InputNumber class="form-control" @bind-Value="NovoCliente.Limite"></InputNumber>
                        </div>
                    </div>
                    <div class="modal-footer">
                        @if (carregandoVenda)
                        {
                            <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
                        }
                        else
                        {
                            <MudButton OnClick="AdicionarNovoCliente" Class="mx-3" Variant="Variant.Filled" Color="Color.Error">Adicionar</MudButton>
                             <MudButton OnClick="FecharModalNovoCliente" Variant="Variant.Filled">Cancelar</MudButton>
                        }
                        </div>
                    </div>
                </div>
            </div>
       
    }

@if (abrirModalVenda)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
                 arial-hidden="true" style="display:block;" @onkeydown="HandleKeyDown">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">Fhechamento de venda</h6>
                </div>
                        @if (vendaRapida)
                        {
                            if(carregandoVenda)
                            {
                                <div class="d-flex justify-content-center">
                                <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                                </div>
                            }
                            else
                            {
                                <MudPaper Class="d-flex px-3 pt-2 mb-1 mx-2" Style="background:#B3E5FC;">
                                <h5>Desconto</h5>
                                <MudSpacer />
                                <h4 aria-hidden="true" class="text-info">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h4>
                            </MudPaper>
                            <hr />
                            <MudPaper Class="d-flex px-3 pt-2 mx-2" Style="background:#C5E1A5;">
                                <h3>Total</h3>
                                <MudSpacer />
                                <h2 aria-hidden="true" class="text-success">@faltaPagar.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h2>
                            </MudPaper>
                            <hr/>
                            <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                            @foreach (var item in metodosDePagamento)
                            {
                                    @if(item.Nome != "A prazo")
                                    {
                                            <MudButton Class="ma-1 me-8" OnClick="() => LancarVendaRapida(item.Id)" Color="Color.Primary" Variant="Variant.Filled">@item.Nome</MudButton>
                                    }
                                    
                            }
                            <hr/>
                            <MudAlert Severity="Severity.Info">
                                    <strong>F2</strong> Dinheiro,
                                    <strong>F4</strong> Pix,
                                    <strong>F8</strong> Crédito,
                                    <strong>F9</strong> Debito.
                            </MudAlert>
                            <hr/>
                            </MudFocusTrap>
                            <MudButton OnClick="() => FecharModalDeVenda()" Variant="Variant.Filled">Cancelar</MudButton>                                
                            }
                        }   
                        else
                        {
                <div class="modal-body">
                    
                    <div>
                    <MudSwitch Label="Dividir conta" @bind-Value="dividirConta" Color="Color.Primary" Class="mr-n2 mb-6"/>
                    </div>
                    @if (dividirConta)
                    {
                        <MudPaper Elevation="0" Class="d-flex px-10">
                            <InputNumber class="form-control w-25" @bind-Value="quantidadeDePessoas"></InputNumber>
                            <label class="ms-6 mt-3"><h5>
                                    @if (quantidadeDePessoas > 0)
                                    {
                                        @((total / quantidadeDePessoas).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))
                                    }</h5></label>
                        </MudPaper>
                    }
                    <MudDivider/>
                    <MudPaper Elevation="0" Class="m-3">
                        <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                        @foreach (var item in formasDePagamento)
                        {
                            <label for="metodoDePagamento"><h6>Forma de pagamento</h6></label>
                            <InputSelect id="metodoDePagamento" class="form-control" @bind-Value="item.MetodoDePagamentoId">
                                @foreach (var metodo in metodosDePagamento)
                                {
                                    <option value="@metodo.Id">@metodo.Nome</option>
                                }
                            </InputSelect>
                            <label for="valor"><h6>Valor</h6></label>
                            <InputNumber @onblur="AtualizaFaltaPagar" @onkeydown="@(e => CompletaValorDoInput(item, e))" id="valor" class="form-control mb-2" @bind-Value="item.Valor"></InputNumber>
                            <MudButton OnClick="() => RemoveFormaDePagamento(item)" Class="mx-3" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudButton>
                        }
                        </MudFocusTrap>
                         <MudPaper Elevation="0" Class="m-3">
                            <label for="clientes"><h6>Cliente</h6></label>
                            <div class="d-flex">
                            <InputSelect id="clientes" class="form-control" @bind-Value="clienteId">
                                <option selected>Selecione um cliente</option>
                                @foreach (var cli in clientes)
                                {
                                    <option value="@cli.Id">@cli.Nome</option>
                                }
                            </InputSelect>
                                    <MudIconButton OnClick="AbirModalNovoCliente" Icon="@Icons.Material.Filled.Add" aria-label="Adicionar Cliente"></MudIconButton>
                                </div>
                         </MudPaper>
                    </MudPaper>
                    <MudPaper Elevation="0" Class="d-flex">
                                    <MudButton OnClick="() => AdicionarFormaDePagamento()" Title="Ctrl + q" Class="mx-2" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Forma de pagamento</MudButton>
                        <MudSwitch Label="Alterar Valor" @bind-Value="alterarDesconto" Color="Color.Primary" Class="mr-n2 ms-10" />
                    </MudPaper>

                    @if (alterarDesconto)
                    { 
                        <MudDivider DividerType="DividerType.Middle"/>
                         <MudPaper Elevation="0" Class="d-flex justify-content-end mx-7 mb-2">
                             <div>
                                 <label>Acrecimo</label>
                                    <InputNumber @onblur="AtualizaFaltaPagar" class="form-control " @bind-Value="acrecimo"></InputNumber>
                             </div>
                             <div class="d-flex mx-2 mt-4">
                                <label class="pt-3">R$</label>
                                <MudSwitch Label="%" @bind-Value="modoPorcent" Color="Color.Primary" Class="ms-2" />
                             </div>
                                <div>
                                <label>Desconto</label>
                            <InputNumber @oninput="AlterarDescontoInput" class="form-control" @bind-Value="descontoAlterado"></InputNumber>
                                </div>
                        </MudPaper>
                    }

                    <MudPaper Class="d-flex px-3 pt-2 mb-1" Style="background:#B3E5FC;">
                        <h5>Desconto</h5>
                        <MudSpacer />
                        <h4 aria-hidden="true" class="text-info">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h4>
                    </MudPaper>
                    @if (faltaPagar < 0 )
                    {
                        <MudPaper Class="d-flex px-3 pt-2" Style="background:#CFD8DC;">
                            <h3>Troco</h3>
                            <MudSpacer />
                            <h2 aria-hidden="true" class="text-dark">@((faltaPagar * -1).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h2>
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Class="d-flex px-3 pt-2" Style="background:#C5E1A5;">
                            <h3>Total</h3>
                            <MudSpacer/>
                            <h2 aria-hidden="true" class="text-success">@faltaPagar.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h2>
                        </MudPaper>
                    }
                </div>
                <div class="modal-footer">
                        @if (carregandoVenda)
                        {
                            <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
                        }
                        else
                        {
                                    <MudButton OnClick="() => ConfirmarVenda()" Class="mx-3" Variant="Variant.Filled" Title="F4" StartIcon="@Icons.Material.Filled.AttachMoney" Color="Color.Success">Confirmar</MudButton>
                            <MudButton OnClick="() => FecharModalDeVenda()" Variant="Variant.Filled">Cancelar</MudButton>
                            @if (baixando)
                            {
                                <MudProgressCircular Class="mb-1 ms-1" Color="Color.Info" Size="Size.Small" Indeterminate="true" />
                            }
                            else
                            {
                                <MudIconButton OnClick="Imprimirrecibo" Class="ms-3" Color="Color.Info" Icon="@Icons.Material.Filled.FileDownload" aria-label="Bixar vendas"></MudIconButton>
                            }
                        }
                </div>
                }
            </div>
            
        </div>
    </div>
}

@if (modalMensagem)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;">
        <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title"></h6>
                </div>
                <div class="modal-body">
                    <span class="text-danger">@textoModalMensagem</span>
                </div>
                <div class="modal-footer">
                    <MudButton OnClick="openCloseModalMensagem" Class="mx-3" Variant="Variant.Filled" Color="Color.Info">Ok</MudButton>
                </div>
            </div>
        </div>
    </div>
}

@* --------------------------------------------- *@

    <MudPaper Class="p-3 mb-3">
            <div class="d-flex justify-content-end"><MudIconButton Icon="@Icons.Material.Filled.Info" OnClick="AbreInfoAtalhos" Size="Size.Small" Color="Color.Info" aria-label="informacoes"></MudIconButton></div>
            @if (infoAtalhos)
            {
                <MudAlert Severity="Severity.Info">
                    <strong>Enter</strong> Lança o produto,
                    <strong>F4</strong> Abre o fchamento de vendas,
                    <strong>F2</strong> Abre o fchamento  de vendas Express,
                    <strong>F4</strong> Fecha a venda, <strong>Ctrl + q</strong> Adiciona oum metodo de pagamento.
                </MudAlert>
            }
            <hr/>
        <MudFocusTrap Disabled="Disabled" DefaultFocus="DefaultFocus">
    <MudGrid>
        <MudItem sm="6" xs="12">
            <h5>Produto</h5>
                    <BlazoredTypeahead MaximumSuggestions="20"  SearchMethod="buscar" @bind-Value="produtoSelecionado">
                    <SelectedTemplate>
                        Cod @context.Codigo ------- @context.Nome  ---- @context.Valor?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))--------------- Qtd.(@context.Quantidade)
                    </SelectedTemplate>
                    <ResultTemplate>
                        Cod @context.Codigo ------- <h5>@context.Nome  @context.Valor?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h5> --------------- Qtd.(@context.Quantidade)
                    </ResultTemplate>
                </BlazoredTypeahead>
        </MudItem>
            <MudItem sm="2" xs="6" @onkeydown="HandleKeyDown">
            <h5>Quantidade</h5>
            <InputNumber class="form-control" @bind-Value="quantidade"></InputNumber>
        </MudItem>
            <MudItem sm="2" xs="6" @onkeydown="HandleKeyDown">
            <h5>Desconto (@(modoPorcent ? "%" : "R$"))</h5>
            <InputNumber class="form-control" @bind-Value="desconto"></InputNumber>
        </MudItem >
        <MudItem sm="1" @onkeydown="HandleKeyDown">
            <h5>Modo de desconto</h5>
            <MudSwitch Class="ms-10" @bind-Value="modoPorcent" Label="%" Color="Color.Success" />
        </MudItem>
        <MudItem @onkeydown="HandleKeyDown">
            <MudButton OnClick="() => LancarProduto(produtoSelecionado, quantidade, desconto)" Title="Enter" Class="mt-6 ms-6" Color="Color.Success">Lançar</MudButton>
        </MudItem>
    </MudGrid>
            </MudFocusTrap>
</MudPaper>



    @if (produtosLancados.Count != 0)
{
        <MudGrid Class="pt-4 mb-3" Spacing="1" @onkeydown="HandleKeyDown">
        <MudItem xs=12 sm=6>
            <MudPaper Style="background:#C5E1A5;" Class="d-flex align-center justify-center mud-width-full py-3">
                <h2 class="pe-5 text-success">Sub-Total</h2>
                <h1 class="text-success">@total.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs=12 sm=6>
            <MudPaper Style="background:#B3E5FC;" Class="d-flex align-center justify-center mud-width-full py-3">
                <h2 style="color:#01579B;" class="pe-5">Descontos</h2>
                <h1 style="color:#01579B;">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h1>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full ">
                <MudButton OnClick="() => AbrirModalDeVenda()" FullWidth Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Sell" Size="Size.Large" Title="F4" Color="Color.Success"><h4>Vender</h4></MudButton>
                <MudIconButton Class="mx-2" Icon="@Icons.Material.Filled.FlashOn" OnClick="AbreVendaRapida" Title="Venda Express - F2 " Color="Color.Warning" aria-label="informacoes"></MudIconButton>
                     <MudIconButton Class="mx-2" Icon="@Icons.Material.Filled.OpenInNew" OnClick="AbrirFecharModalDeixarEmAberto" Color="Color.Info" aria-label="informacoes"></MudIconButton>
             </MudPaper>
         </MudItem>
         @foreach (var item in produtosLancados)
        {
            <MudPaper Height="70px" Class="d-flex align-center justify-center mud-width-full my-2 px-1">
                <MudItem Class="py-0" xs="8">
                    <h5>@item.Quantidade x @item.Nome</h5>
                </MudItem>
                <MudItem xs="4">
                    @if (item.Desconto == null || item.Desconto == 0)
                    {
                        <h4 class="text-success">@((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h4>
                    }
                    else
                    {
                        <h5 class="text-success">@(((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade) - item.Desconto)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h5>
                        <h8 class="text-success"><s>@((produtos.FirstOrDefault(x => x.Id == item.IdDoProduto)?.Valor * item.Quantidade)?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</s></h8>
                        <h8 class="text-danger"> -@item.Desconto?.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h8>
                    }
                </MudItem>
                <MudItem Class="ps-4">
                    <MudIconButton OnClick="() => ConfirmarExclusaoDoItem(item.IdDoProduto)" Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                </MudItem>
            </MudPaper>
        }
    </MudGrid>
}
}

@code {



    public bool receberComanda { get; set; }
    public string vendedor { get; set; }
    public bool modalDeixarEmAberto { get; set; }
    public bool carregando = true;
    public bool baixando = false;
    public bool vendaRapida = false;
    public bool infoAtalhos = false;
    private Caixa caixaAtual = null;
    public Produto produtoSelecionado;
    private FormaDePagamento formaDePagamento = new();
    private int quantidade = 1;
    private decimal acrecimo { get; set; }
    private decimal acrecimoVariavel { get; set; }
    private decimal desconto { get; set; }
    private decimal descontoTotal { get; set; }
    private decimal  descontoAlterado { get; set; }
    private bool modoPorcent = false;
    private decimal total { get; set; }
    private decimal totalfixo { get; set; }
    private decimal faltaPagar { get; set; }
    private Guid idDoItemAserDeletado { get; set; }
    private bool abrirModalVenda = false;
    private bool dividirConta = false;
    private bool modalNovoCliente = false;
    private bool alterarDesconto = false;
    private bool bloqueioModal = false;
    private bool mostrarErroCadastroDeCliente = false;
    private string erroCadastroDeCliente { get; set; }
    private int quantidadeDePessoas = 1;
    private int numeroDaContaEmAberto { get; set; }
    ModalDeConfirmacao modalConfirma = new();
    bool Disabled { get; set; }
    Guid clienteId { get; set; }
    Cliente NovoCliente = new();

    int botao = 0;

    bool carregandoVenda = false;

    public bool modalMensagem = false;
    public string textoModalMensagem { get; set; }

    private List<Produto> produtos = new List<Produto>();
    private List<Produto> produtosAutoComplete = new List<Produto>();
    private List<ProdutoVendido> produtosLancados = new List<ProdutoVendido>();
    private List<MetodoDePagamento> metodosDePagamento = new List<MetodoDePagamento>();
    private List<FormaDePagamento> formasDePagamento = new List<FormaDePagamento>();
    private List<Cliente> clientes = new List<Cliente>();
    private List<EmAberto> ContasEmAberto = new List<EmAberto>();
    private List<Usuario> usuarios = new List<Usuario>();

    Usuario user = new();

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;

    [JSInvokable]
    public void Focus()
    {
        Disabled = false;
        DefaultFocus = DefaultFocus.LastChild;
        Disabled = true;
    }

    public void AbreInfoAtalhos() => infoAtalhos = !infoAtalhos;
    public void AbreVendaRapida()
    {
        vendaRapida = true;
        AbrirModalDeVenda();
    }
    public void openCloseModalMensagem() => modalMensagem = !modalMensagem;

    protected override async Task OnInitializedAsync() 
    { 

        bool usuarioAtivo = await UsuarioServices.GetUsuarioAtivo();
        if (!usuarioAtivo) NavigationManager.NavigateTo("/pagamento");
        produtos = await ProdutoServices.GetAllProdutosAsync();
        metodosDePagamento = await MetodoDePagamentoServices.GetAllMetodosAsync();
        formasDePagamento.Add(formaDePagamento);
        caixaAtual = await CaixaServices.GetCaixaAberto();
        user = await UsuarioServices.GetUsuario();
        clientes = await ClienteServices.ObterTodos();
        ContasEmAberto = await EmabertoServices.GetAllEmAberto();
        usuarios = await UsuarioServices.GetUsuariosDaConta();
        carregando = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            // Execute ação desejada, por exemplo, salvar os dados
            await Task.Run(() =>
            {
                LancarProduto(produtoSelecionado, quantidade, desconto);
            });

        }
        else if (e.Key == "F4")
        {
            if (produtosLancados.Count > 0)
            {
                if (abrirModalVenda && !vendaRapida)
                {
                    await ConfirmarVenda();
                }
                else if (vendaRapida && produtosLancados.Count > 0)
                {
                    Guid metodoPagamentoId = metodosDePagamento[1].Id;
                    await LancarVendaRapida(metodoPagamentoId);
                }
                else
                {
                    AbrirModalDeVenda();
                }
            }

        }
        else if (e.Key == "F2")
        {
            if (produtosLancados.Count > 0 && !vendaRapida)
            {
                AbreVendaRapida();
            }
            else if (vendaRapida && produtosLancados.Count > 0)
            {
                Guid metodoPagamentoId = metodosDePagamento[0].Id;
                await LancarVendaRapida(metodoPagamentoId);
            }
        }
        else if (e.Key == "Escape")
        {
            FecharModalDeVenda();
            vendaRapida = false;

        }
        else if (e.CtrlKey && e.Key == "q")
        {
            if(!vendaRapida)
            {
                AdicionarFormaDePagamento();
            }

        }
        else if (e.Key == "F8")
        {
            if (produtosLancados.Count > 0 && vendaRapida)
            {
                Guid metodoPagamentoId = metodosDePagamento[2].Id;
                await LancarVendaRapida(metodoPagamentoId);
            }
        }
        else if (e.Key == "F9")
        {
            if (produtosLancados.Count > 0 && vendaRapida)
            {
                Guid metodoPagamentoId = metodosDePagamento[3].Id;
                await LancarVendaRapida(metodoPagamentoId);
            }
        }

    }

    //fuções do modal de fhechamento de venda.

    public void FecharModalDeVenda() 
    {
        abrirModalVenda = false;
        vendaRapida = false;
    }
    public void AbrirModalDeVenda() 
    {
        faltaPagar = total;
        abrirModalVenda = true;
    }
    public void ReceberComanda() => receberComanda = !receberComanda;

    public async Task ConfirmarVenda()
    {
        carregandoVenda = true;
        caixaAtual = await CaixaServices.GetCaixaAberto();
        Cliente cliente = await ClienteServices.GetCliente((Guid)clienteId);
        bool metodoDePagamentoNulo = false;
        bool aprazo = false;
        decimal totalPrazo = 0;

        foreach (var item in formasDePagamento)
        {
            if (item.MetodoDePagamentoId == Guid.Empty) metodoDePagamentoNulo = true;
            else
            {
                var metodoConfere = await MetodoDePagamentoServices.GetMetodoDePagamentoAsync(item.MetodoDePagamentoId);
                if (metodoConfere.Nome == "A prazo")
                {
                    aprazo = true;
                    totalPrazo += item.Valor;
                }
            }
        }
        if (faltaPagar > 0)
        {
            openCloseModalMensagem();
            textoModalMensagem = $"Ainda faltam R${faltaPagar} do valor TOTAL para concluir.";
            carregandoVenda = false;
        }
        else if (metodoDePagamentoNulo)
        {
            openCloseModalMensagem();
            textoModalMensagem = "Todas as formas de pagamento devem ser selecionadas.";
            carregandoVenda = false;
        }
        else if ((descontoTotal / total) > user.porcentagemUsuario)
        {
            openCloseModalMensagem();
            textoModalMensagem = $"Você não tem permição para descontos maiors que {user.porcentagemUsuario * 100} %";
            carregandoVenda = false;
        }
        else if (metodosDePagamento.Count == 0 || caixaAtual == null)
        {
            abrirModalVenda = false;
            bloqueioModal = true;
        }
        else
        {
            if (aprazo)
            {
                if (cliente == null)
                {
                    openCloseModalMensagem();
                    textoModalMensagem = "Para vender A prazo tem que selecinar um cliente.";
                    carregandoVenda = false;

                }
                else if (totalPrazo > cliente.LimiteRestante)
                {
                    openCloseModalMensagem();
                    textoModalMensagem = "O limite do cliente ja foi excedido";
                    carregandoVenda = false;
                }
                else
                {

                    List<ProdutoVendido> listaDeProdutos = new List<ProdutoVendido>(produtosLancados);
                    List<FormaDePagamento> listaDeFormasDePagamentos = new List<FormaDePagamento>(formasDePagamento);
                    Venda vendaModal = new();
                    vendaModal.Total = total;
                    vendaModal.Descontos = descontoTotal;
                    vendaModal.Caixa = caixaAtual;
                    vendaModal.IdCliente = cliente.Id;
                    vendaModal.NomeDoCliente = cliente.Nome;
                    produtosLancados.Clear();
                    formasDePagamento.Clear();
                    total = 0;
                    descontoTotal = 0;
                    await VendaServices.AddVendaAsync(vendaModal, listaDeProdutos, listaDeFormasDePagamentos);
                    abrirModalVenda = false;
                    toastService.ShowSuccess("Venda realizada com SUCESSO!");
                    carregandoVenda = false;
                    NavigationManager.NavigateTo(NavigationManager.Uri, true);
                }

            }
            else
            {
                List<ProdutoVendido> listaDeProdutos = new List<ProdutoVendido>(produtosLancados);
                List<FormaDePagamento> listaDeFormasDePagamentos = new List<FormaDePagamento>(formasDePagamento);
                Venda vendaModal = new();
                vendaModal.Total = total;
                vendaModal.Descontos = descontoTotal;
                vendaModal.Caixa = caixaAtual;

                if (cliente != null) { vendaModal.NomeDoCliente = cliente.Nome; }
                produtosLancados.Clear();
                formasDePagamento.Clear();
                total = 0;
                descontoTotal = 0;
                await VendaServices.AddVendaAsync(vendaModal, listaDeProdutos, listaDeFormasDePagamentos);
                abrirModalVenda = false;
                toastService.ShowSuccess("Venda realizada com SUCESSO!");
                carregandoVenda = false;
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }

        }
        vendaRapida = false;

    }

    //---------------------------------------
    private async Task<IEnumerable<Produto>> buscar(string value)
    {
        // Verifica se o 'value' não é um número
        bool naoEhNumero = !double.TryParse(value, out _);

        // Se não for um número, busca por 'Nome'
        if (naoEhNumero)
        {
            return await Task.FromResult(produtos.Where(x => x.IsActive && x.Nome.ToLower().Contains(value.ToLower())).ToList());
        }
        // Se for um número, busca por 'Codigo'
        else
        {
            return await Task.FromResult(produtos.Where(x => x.IsActive && x.Codigo.ToString().ToLower().Contains(value)).ToList());
        }
    }

    public void ConfirmarExclusaoDoItem(Guid id)
    {
        modalConfirma.Exibir();
        idDoItemAserDeletado = id;
    }

    public void LimparInputs()
    {
        quantidade = 0;
        desconto = 0;
        produtoSelecionado = null;
    }

    public void RemoverItemDaListaDeVendas(Guid id)
    {
        var produtoExiste = produtosLancados.FirstOrDefault(x => x.IdDoProduto == id);
        produtosLancados.Remove(produtoExiste);
        var produtoEx = produtos.FirstOrDefault(x => x.Id == id);
        totalfixo -= (decimal)produtoEx.Valor;
        descontoTotal -= (decimal)produtoExiste.Desconto;
        modalConfirma.Ocultar();
        total = totalfixo;
    }


    public async Task LancarProduto(Produto produto, int quantidade, decimal desc)
    {
        if ((int)quantidade <= 0)
        {
            toastService.ShowError("A quantidade do produto deve ser maior que zero!");
        }
        else if (produtoSelecionado == null)
        {
            toastService.ShowError("Selecione um produto");
        }
        else if (metodosDePagamento.Count == 0 || caixaAtual == null)
        {
            bloqueioModal = true;
        }
        else if (produto.IsControled && (produto.Quantidade - quantidade) < 0)
        {
            toastService.ShowError("O quantidade em estoque deste produto não permite esta venda!");
        }
        else
        {
            var produtoExiste = produtosLancados.FirstOrDefault(x => x.IdDoProduto == produto.Id);
            decimal confereDesconto = 0;

            confereDesconto = desc / ((decimal)produto.Valor * quantidade);

            if (modoPorcent)
            {
                confereDesconto = desc / 100;
                desc = desc / 100 * ((decimal)produto.Valor * quantidade);
            }

            total += ((decimal)produto.Valor * quantidade) - desc;
            totalfixo = total + desc;
            descontoTotal += desc;

            if (user.NivelAdmin == 2)
            {
                if (confereDesconto > user.porcentagemUsuario)
                {
                    toastService.ShowError($"Você não tem permição para descontos maiors que {user.porcentagemUsuario * 100} %");
                }
                else
                {

                    if (produtoExiste != null)
                    {
                        produtoExiste.Quantidade += quantidade;
                        produtoExiste.Desconto += desc;
                    }
                    else
                    {
                        ProdutoVendido produtoAtualizado = new ProdutoVendido();
                        produtoAtualizado.IdDoProduto = produto.Id;
                        produtoAtualizado.Nome = produto.Nome;
                        produtoAtualizado.Quantidade = (int)quantidade;
                        produtoAtualizado.Desconto = desc;
                        produtosLancados.Add(produtoAtualizado);
                    }
                }
            }
            else
            {

                if (produtoExiste != null)
                {
                    produtoExiste.Quantidade += quantidade;
                    produtoExiste.Desconto += desc;
                }
                else
                {
                    ProdutoVendido produtoAtualizado = new ProdutoVendido();
                    produtoAtualizado.IdDoProduto = produto.Id;
                    produtoAtualizado.Nome = produto.Nome;
                    produtoAtualizado.Quantidade = (int)quantidade;
                    produtoAtualizado.Desconto = desc;
                    produtosLancados.Add(produtoAtualizado);
                }
            }
            LimparInputs();
        }

    }

    public void AtualizaFaltaPagar()
    {
        faltaPagar = (totalfixo - descontoTotal) + acrecimo;
        decimal novoTotal = 0;
        foreach (var item in formasDePagamento)
        {
            novoTotal += item.Valor;
        }
        faltaPagar -= novoTotal;
    }

    public void AdicionarFormaDePagamento()
    {
        formasDePagamento.Add(new FormaDePagamento());
    }

    public void RemoveFormaDePagamento(FormaDePagamento forma)
    {
        formasDePagamento.Remove(forma);
        AtualizaFaltaPagar();
    }

    private void AlterarDescontoInput(ChangeEventArgs args)
    {
        string valorString = args.Value.ToString();
        total = totalfixo;
        if (modoPorcent)
        {
            if (int.TryParse(valorString, out int valorinteiro))
            {
                decimal descontoPercentual = (decimal)valorinteiro / 100;
                descontoTotal = descontoPercentual * total;
            }
            else descontoTotal = 0;
        }
        else
        {
            if (decimal.TryParse(valorString, out decimal valorDecimal))
            {
                descontoTotal = valorDecimal;
            }
            else descontoTotal = 0;
        }
        AtualizaFaltaPagar();
    }
    private void AcrecimoMetodo(ChangeEventArgs args)
    {
        string valorString = args.Value.ToString();
        total = totalfixo;
        if (modoPorcent)
        {
            if (int.TryParse(valorString, out int valorinteiro))
            {
                decimal acrecimoPercentual = (decimal)valorinteiro / 100;
                acrecimo = acrecimoPercentual * total;
            }
            else acrecimo = 0;
        }
        else
        {
            if (decimal.TryParse(valorString, out decimal valorDecimal))
            {
                acrecimo = valorDecimal;
            }
            else acrecimo = 0;
        }
        AtualizaFaltaPagar();
    }

    private void CompletaValorDoInput(FormaDePagamento forma ,KeyboardEventArgs args)
    {
        if (args.Key == " ")
        {
            forma.Valor = faltaPagar;
        }
    }
    public async Task Imprimirrecibo()
    {
        baixando = true;
        byte[] bytesDoRelatorio = await VendaServices.GerarRecibo(produtosLancados, descontoAlterado, total);
        string nomeDoArquivo = "vendas.pdf";

        // Tipo de arquivo para indicar ao navegador que é um PDF
        string tipoDoArquivo = "application/pdf";

        await JSRuntime.InvokeAsync<object>("saveAsFile", nomeDoArquivo, bytesDoRelatorio, tipoDoArquivo);
        baixando = false;
    }

    public void AbirModalNovoCliente()
    {
        abrirModalVenda = false;
        modalNovoCliente = true;

    }
    public void FecharModalNovoCliente()
    {
        modalNovoCliente = false;
        abrirModalVenda = true;
    }

    public async Task AdicionarNovoCliente()
    {
        mostrarErroCadastroDeCliente = false;
        if (NovoCliente.Nome == null)
        {
            mostrarErroCadastroDeCliente = true;
            erroCadastroDeCliente = "Por favor preencha o campo nome";
        }else
        {
            carregandoVenda = true;
            await ClienteServices.AddCliente(NovoCliente);
            NovoCliente = new();
            clientes = await ClienteServices.ObterTodos();
            FecharModalNovoCliente();
            carregandoVenda = false;
        }

    }

    public async Task LancarVendaRapida(Guid id)
    {
        if (formasDePagamento.Count > 0)
        {
            formasDePagamento[0].MetodoDePagamentoId = id;
            formasDePagamento[0].Valor = total;
        }
        else
        {
            FormaDePagamento x = new();
            x.MetodoDePagamentoId = id;
            x.Valor = total;
            formasDePagamento.Add(x);
        }
        AtualizaFaltaPagar();
        await ConfirmarVenda();
    }

    public void AbrirFecharModalDeixarEmAberto() => modalDeixarEmAberto = !modalDeixarEmAberto;
    public async Task DeixarEmAberto()
    {
        await EmabertoServices.AddProdutoEmAberto(produtosLancados, numeroDaContaEmAberto, vendedor);
        AbrirFecharModalDeixarEmAberto();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

}


