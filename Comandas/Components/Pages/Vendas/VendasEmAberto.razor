@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IEmAbertoServices EmabertoServices
@inject ICaixaServices CaixaServices
@inject IClienteServices ClienteServices
@inject IMetodoDePagamentoServices MetodoDePagamentoServices
@inject IUsuarioServices UsuarioServices
@inject IToastService toastService
@inject IVendaServices VendaServices
@inject IProdutoServices ProdutoService
@inject IJSRuntime JSRuntime
@inject IConfigServices ConfigServices
@inject NavigationManager NavigationManager

@using Blazored.Toast.Configuration
@using Blazored.Typeahead

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.Material"
                InfoIcon="school"
                WarningIcon="warning" />


<ModalDeConfirmacao  @ref="modalDeConfirmacao" onConfirma="() => DeletarComanda(numeroComanda)" Titulo="Deletar comanda" onCancela="() => modalDeConfirmacao.Ocultar()">Deseja deletar a comanda n° <strong>@numeroComanda</strong>?</ModalDeConfirmacao>

@if (abrirModalVenda)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;" @onkeydown="HandleKeyDown">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">Fhechamento de venda</h6>
                </div>
                
                    <div class="modal-body">
                        <MudDivider />
                        <MudPaper Elevation="0" Class="m-3">
                        @if (config.VendaRapida)
                        {
                            <MudAlert Severity="Severity.Info">
                                <strong>F2</strong> Dinheiro,
                                <strong>F4</strong> Pix,
                                <strong>F8</strong> Crédito,
                                <strong>F9</strong> Debito.
                                <strong>Enter</strong> Finaliza venda.
                            </MudAlert>
                            <hr />
                        }
                            <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                                @foreach (var item in formasDePagamento)
                                {
                                @if (!config.VendaRapida)
                                {
                                    <label for="metodoDePagamento"><h6>Forma de pagamento</h6></label>
                                    <InputSelect id="metodoDePagamento" class="form-control" @bind-Value="item.MetodoDePagamentoId">
                                        @foreach (var metodo in metodosDePagamento)
                                        {
                                            <option value="@metodo.Id">@metodo.Nome</option>
                                        }
                                    </InputSelect>
                                    <label for="valor"><h6>Valor</h6></label>
                                    <InputNumber @onblur="AtualizaFaltaPagar" @onkeydown="@(e => CompletaValorDoInput(item, e))" id="valor" class="form-control mb-2" @bind-Value="item.Valor"></InputNumber>
                                    <MudButton OnClick="() => RemoveFormaDePagamento(item)" Class="mx-3" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudButton>
                                }
                                else
                                {

                                    <div class="input-group input-group-sm mb-3">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">@item.NomeDoMetodo</span>
                                        <InputNumber @onblur="AtualizaFaltaPagar" @onkeydown="@(e => CompletaValorDoInput(item, e))" id="@item.NomeDoMetodo" class="form-control" @bind-Value="item.Valor"></InputNumber>
                                    </div>
                                }
                            }
                            </MudFocusTrap>
                            <MudPaper Elevation="0" Class="m-3">
                                <label for="clientes"><h6>Cliente</h6></label>
                                <div class="d-flex">
                                    <InputSelect id="clientes" class="form-control" @bind-Value="clienteId">
                                        <option selected>Selecione um cliente</option>
                                        @foreach (var cli in clientes)
                                        {
                                            <option value="@cli.Id">@cli.Nome</option>
                                        }
                                    </InputSelect>
                                </div>
                            </MudPaper>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="d-flex">
                            <MudButton OnClick="() => AdicionarFormaDePagamento()" Title="Ctrl + q" Class="mx-2" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Forma de pagamento</MudButton>
                            <MudSwitch Label="Alterar Valor" @bind-Value="alterarDesconto" Color="Color.Primary" Class="mr-n2 ms-10" />
                        </MudPaper>

                        @if (alterarDesconto)
                        {
                            <MudDivider DividerType="DividerType.Middle" />
                            <MudPaper Elevation="0" Class="d-flex justify-content-end mx-7 mb-2">
                                <div>
                                    <label>Acrecimo</label>
                                    <InputNumber @oninput="AcrecimoMetodo" class="form-control " @bind-Value="acrecimoVariavel"></InputNumber>
                                </div>
                                <div class="d-flex mx-2 mt-4">
                                    <label class="pt-3">R$</label>
                                    <MudSwitch Label="%" @bind-Value="modoPorcent" Color="Color.Primary" Class="ms-2" />
                                </div>
                                <div>
                                    <label>Desconto</label>
                                    <InputNumber @oninput="AlterarDescontoInput" class="form-control" @bind-Value="descontoAlterado"></InputNumber>
                                </div>
                            </MudPaper>
                        }

                        <MudPaper Class="d-flex px-3 pt-2 mb-1" Style="background:#B3E5FC;">
                            <h5>Desconto</h5>
                            <MudSpacer />
                            <h4 aria-hidden="true" class="text-info">@descontoTotal.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h4>
                        </MudPaper>
                        @if (faltaPagar < 0)
                        {
                            <MudPaper Class="d-flex px-3 pt-2" Style="background:#CFD8DC;">
                                <h3>Troco</h3>
                                <MudSpacer />
                                <h2 aria-hidden="true" class="text-dark">@((faltaPagar * -1).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</h2>
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Class="d-flex px-3 pt-2" Style="background:#C5E1A5;">
                                <h3>Total</h3>
                                <MudSpacer />
                                <h2 aria-hidden="true" class="text-success">@faltaPagar.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"))</h2>
                            </MudPaper>
                        }
                    </div>
                    <div class="modal-footer">
                        @if (carregandoVenda)
                        {
                            <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
                        }
                        else
                        {
                            <MudButton OnClick="() => ConfirmarVenda()" Class="mx-3" Variant="Variant.Filled" Title="Ctrl + y" StartIcon="@Icons.Material.Filled.AttachMoney" Color="Color.Success">Confirmar</MudButton>
                            <MudButton OnClick="() => FecharModalDeVenda()" Variant="Variant.Filled">Cancelar</MudButton>
                        }
                    </div>
            </div>

        </div>
    </div>
}
@if (modalMensagem)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;">
        <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title"></h6>
                </div>
                <div class="modal-body">
                    <span class="text-danger">@textoModalMensagem</span>
                </div>
                <div class="modal-footer">
                    <MudButton OnClick="openCloseModalMensagem" Class="mx-3" Variant="Variant.Filled" Color="Color.Info">Ok</MudButton>
                </div>
            </div>
        </div>
    </div>
}

@if (abrirModalNovoEmAberto)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;" @onkeydown="HandleKeyDown">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Nova conta</h2>
                </div>
                <div class="modal-body">
                    <EditForm Model="@NovoEmAberto" OnValidSubmit="CadastrarNovoEmAberto">
                        <DataAnnotationsValidator />
                        <div>
                            <label>Nome</label>
                            <InputText @bind-Value="NovoEmAberto.Nome" class="form-control" />
                            <ValidationMessage For="@(() => NovoEmAberto.Nome)" />
                        </div>
                        <div class="modal-footer">
                            <MudButton Class="mx-3" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error">Aplicar</MudButton>
                            <MudButton OnClick="FecharModalNovo" Variant="Variant.Filled">Cancelar</MudButton>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

}

@if (verProdutos)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document" >
            <div class="modal-content">
                <MudDataGrid T="ProdutosEmAberto" MultiSelection="true" Items="@produtosDaComanda" SelectedItemsChanged="@SelecionarProduto" >
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Produtos vendidos</MudText>
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="ProdutosEmAberto" />
                        <PropertyColumn Property="x => x.Vendedor" Sortable="false" Title="Vendedor" Filterable="false" />
                        <PropertyColumn Property="x => x.DataDaVenda" Sortable="false" Title="Data" Filterable="false" />
                        <PropertyColumn Property="x => x.NomeProduto" Sortable="false" Title="Nome" Filterable="false" />
                        <PropertyColumn Property="x => x.Quantidade" Title="Qtd." Sortable="false" Filterable="false" />
                        <PropertyColumn Property="x => x.total" Title="Valor." Format="C" Sortable="false" Filterable="false" />
                    </Columns>
                </MudDataGrid>
                @if (produtosDaComandaSelecionados.Count > 0)
                {
                    <MudButton OnClick="() => AbrirModalDeVenda(idComanda, numeroComanda, true)" Class="mx-3 mt-1 " Variant="Variant.Filled" Color="Color.Success">Vender</MudButton>
                }
                <MudButton OnClick="FecharVerProdutos" Class="mx-3 my-3" Variant="Variant.Filled" Color="Color.Info">OK</MudButton>
            </div>
        </div>
    </div>
}

@if (verHistorico)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;" @onkeydown="HandleKeyDown">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content">
                <MudDataGrid T="HistoricoEmAberto" MultiSelection="true" Items="@Historico">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Produtos vendidos</MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Horario" Sortable="false" Title="Data" Filterable="false" />
                        <PropertyColumn Property="x => x.Valor" Sortable="false" Title="Valor" Filterable="false" />
                        <TemplateColumn Filterable="false" Sortable="false" Title="saida/entrada">
                            <CellTemplate>
                                @if (context.Item.IsEntrada)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.KeyboardControlKey" Color="Color.Success" Title="entrada" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Error" Title="saida" />
                                }
                            </CellTemplate>
                        </TemplateColumn>

                    </Columns>
                </MudDataGrid>
                <MudButton OnClick="() => verHistorico=false" Class="mx-3 my-3" Variant="Variant.Filled" Color="Color.Info">OK</MudButton>
            </div>
        </div>
    </div>
}

@if (lancarVenda)
{
    <div class="modal-backdrop show"></div>
    <div class="modal" tabindex="-1" role="dialog"
         arial-hidden="true" style="display:block;" @onkeydown="HandleKeyDown">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="container">
                <LancarVenda emAbertoParametro="abertoParametro"></LancarVenda>
                </div>
            <div class="modal-footer">
               
                     <MudButton OnClick="() => ModalLancarVendaEmAberto()" Variant="Variant.Filled">Cancelar</MudButton>
                
            </div>
            </div>
        </div>
    </div>
}



@*  Cards das comandas abertar  *@

<MudPaper Elevation="0" Class="my-4 pe-7">
    <MudGrid Class="mx-1" @onkeydown="HandleKeyDown">
        <MudItem sm="12" xs="12" md="3" xl="2">
            <MudCard Elevation="0" Style="background:#1C7293;" Class="h-100">
                <MudCardHeader>
                    <CardHeaderContent>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="d-flex justify-content-center">
                    <MudIconButton OnClick="AbrirModalNovo" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Style="color:white;"></MudIconButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
        @foreach (var item in EmAbertos)
        {
            <MudItem sm="12" xs="12" md="3" xl="2">
                <MudCard Elevation="0" Style="background:#1C7293;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex">
                                <MudText Typo="Typo.h6" Style="color:white;">@item.Numero</MudText>
                                <MudSpacer />
                                    <MudIconButton OnClick="() => ModalLancarVendaEmAberto(item.Numero, item)" Icon="@Icons.Material.Filled.Add" Style="color:white;"></MudIconButton>
                                    <MudIconButton OnClick="() => AbrirModalDeVenda(item.Id, item.Numero)" Icon="@Icons.Material.Filled.CurrencyBitcoin" Style="color:white;"></MudIconButton>
                                    <MudIconButton OnClick="() => AbrirModalConfirmacaoDelete(item.Numero)" Icon="@Icons.Material.Filled.DeleteOutline" Style="color:white;"></MudIconButton>
                                    <MudIconButton OnClick="() => AbrirModalFecharVerProdutos(item.Id,item.Numero)" Icon="@Icons.Material.Filled.RemoveRedEye" Style="color:white;"></MudIconButton>
                            </div>
                            <hr / style="color:white;">
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Style="color:white;">@item.Nome</MudText>
                    </MudCardContent>
                    <hr / style="color:white;">
                    <MudCardActions Class="d-flex justify-content-center">
                            <MudIconButton OnClick="() => BuscarHistorico(item.Id)" Icon="@Icons.Material.Filled.Checklist" Style="color:white;"></MudIconButton>
                            <MudSpacer></MudSpacer>
                            <MudText Typo="Typo.h6" Style="color:white;">@((Historicos.Where(x => x.IdEmAberto == item.Id && x.IsEntrada).Sum(x => x.Valor) - Historicos.Where(x => x.IdEmAberto == item.Id && !x.IsEntrada).Sum(x => x.Valor)).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")))</MudText>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudPaper>


<script>
    window.scrollToSelectedOption = function (selectedIndex) {
    var selectedOption = document.querySelector('.option.selected');
    if (selectedOption) {
    selectedOption.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    }
</script>

@code {
    ModalDeConfirmacao modalDeConfirmacao;

    public List<EmAberto> EmAbertos = new List<EmAberto>();
    public List<ProdutosEmAberto> produtosDaComanda = new List<ProdutosEmAberto>();
    public List<ProdutosEmAberto> produtosDaComandaSelecionados = new List<ProdutosEmAberto>();
    private List<ProdutoVendido> produtosLancados = new List<ProdutoVendido>();
    public List<HistoricoEmAberto> Historico = new List<HistoricoEmAberto>();
    public List<HistoricoEmAberto> Historicos = new List<HistoricoEmAberto>();
    private Caixa caixaAtual = null;
    public EmAberto NovoEmAberto = new();
    public bool abrirModalNovoEmAberto { get; set; }
    public bool verProdutos { get; set; }
    public bool verHistorico { get; set; }



    public bool lancarVenda {get;set; }
    public int emAbertoNumero { get; set; }
    public EmAberto abertoParametro;

    public int numeroComanda { get; set; }
    public decimal totalComanda { get; set; }
    public Guid idComanda { get; set; }

    bool carregandoVenda = false;
    Guid clienteId { get; set; }
    private List<FormaDePagamento> formasDePagamento = new List<FormaDePagamento>();
    private decimal faltaPagar { get; set; }
    public bool modalMensagem = false;
    public string textoModalMensagem { get; set; }
    public void openCloseModalMensagem() => modalMensagem = !modalMensagem;
    private decimal descontoTotal { get; set; }
    private decimal total { get; set; }
    Usuario user = new();
    private List<MetodoDePagamento> metodosDePagamento = new List<MetodoDePagamento>();
    private bool abrirModalVenda = false;
    private bool bloqueioModal = false;
    private List<Cliente> clientes = new List<Cliente>();
    private bool alterarDesconto = false;
    private decimal acrecimoVariavel { get; set; }
    private bool modoPorcent = false;
    private decimal descontoAlterado { get; set; }
    private decimal totalfixo { get; set; }
    private decimal acrecimo { get; set; }
    private FormaDePagamento formaDePagamento = new();

    public int numeroDaComanda = 0;
    Configuracao config = new();

    public async void ModalLancarVendaEmAberto(int numero = 0, EmAberto? paramentro = null)
    {
        lancarVenda = !lancarVenda;
        emAbertoNumero = numero;
        abertoParametro = paramentro;
        if (numero == 0 && paramentro == null)
        {
            Historicos = await EmabertoServices.GetHistoricos();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        EmAbertos = await EmabertoServices.GetAllEmAberto();
        Historicos = await EmabertoServices.GetHistoricos();
        caixaAtual = await CaixaServices.GetCaixaAberto();
        user = await UsuarioServices.GetUsuario();
        clientes = await ClienteServices.ObterTodos();
        metodosDePagamento = await MetodoDePagamentoServices.GetAllMetodosAsync();
        formasDePagamento.Add(formaDePagamento);
        config = await ConfigServices.ObterConfigAsync();
        if (config == null) { config = new(); }
    }

    public void AbrirModalNovo() => abrirModalNovoEmAberto = true;
    public void FecharModalNovo()
    {
        abrirModalNovoEmAberto = false;
    }

    public void AbrirVerProdutos() => verProdutos = !verProdutos;

    public void FecharVerProdutos()
    {
        verProdutos = false;
    }

    public async Task AbrirModalFecharVerProdutos(Guid id,int numero)
    {
        Historico = Historicos.Where(x => x.IdEmAberto == id).ToList();
        idComanda = id;
        numeroComanda = numero;
        totalComanda = Historico.Where(x => x.IsEntrada).Sum(x => x.Valor) - Historico.Where(x => !x.IsEntrada).Sum(x => x.Valor);
        produtosDaComanda = await EmabertoServices.GetAllProdutosEmAberto(numero);
        produtosDaComandaSelecionados.Clear();
        AbrirVerProdutos();
    }
    public async Task CadastrarNovoEmAberto()
    {
        int maiorNumero = EmAbertos.Any() ? EmAbertos.Max(e => e.Numero) : 0;
        int proximoNumero = maiorNumero + 1;
        while (EmAbertos.Any(e => e.Numero == proximoNumero))
        {
            proximoNumero++;
        }
        NovoEmAberto.Numero = proximoNumero;

        await EmabertoServices.AddEmAberto(NovoEmAberto);
        EmAbertos = await EmabertoServices.GetAllEmAberto();
        NovoEmAberto = new();
        FecharModalNovo();
    }

    public async Task DeletarComanda(int numero)
    {
        await EmabertoServices.DeletarEmAberto(numero);
        EmAbertos = await EmabertoServices.GetAllEmAberto();
        modalDeConfirmacao.Ocultar();

    }

    public async Task LancarProduto()
    {
        if(produtosDaComandaSelecionados.Count > 0)
        {
            produtosDaComanda = produtosDaComandaSelecionados;
        }
        foreach (var item in produtosDaComanda)
        {
            ProdutoVendido produtoAtualizado = new ProdutoVendido();
            produtoAtualizado.IdDoProduto = item.IdDoProduto;
            produtoAtualizado.Nome = item.NomeProduto;
            produtoAtualizado.Quantidade = item.Quantidade;
            produtoAtualizado.Desconto = 0;
            produtosLancados.Add(produtoAtualizado);
        }
    }

    public async Task ConfirmarVenda()
    {
        carregandoVenda = true;
        caixaAtual = await CaixaServices.GetCaixaAberto();
        Cliente cliente = await ClienteServices.GetCliente((Guid)clienteId);
        bool metodoDePagamentoNulo = false;
        bool aprazo = false;
        decimal totalPrazo = 0;

        faltaPagar = Math.Round(faltaPagar, 2);

        foreach (var item in formasDePagamento)
        {
            if (item.MetodoDePagamentoId == Guid.Empty) metodoDePagamentoNulo = true;
            else
            {
                var metodoConfere = await MetodoDePagamentoServices.GetMetodoDePagamentoAsync(item.MetodoDePagamentoId);
                if (metodoConfere.Nome == "A prazo" && Math.Round(item.Valor == null ? 0 : (decimal)item.Valor,2) > 0)
                {
                    aprazo = true;
                    totalPrazo += item.Valor == null ? 0 : (decimal)item.Valor; ;
                }
            }
        }
        if (metodoDePagamentoNulo)
        {
            openCloseModalMensagem();
            textoModalMensagem = "Todas as formas de pagamento devem ser selecionadas.";
            carregandoVenda = false;
        }
        else if ((descontoTotal / total) > user.porcentagemUsuario)
        {
            openCloseModalMensagem();
            textoModalMensagem = $"Você não tem permição para descontos maiors que {user.porcentagemUsuario * 100} %";
            carregandoVenda = false;
        }
        else if (metodosDePagamento.Count == 0 || caixaAtual == null)
        {
            abrirModalVenda = false;
            bloqueioModal = true;
        }
        else
        {
            if (aprazo)
            {
                if (cliente == null)
                {
                    openCloseModalMensagem();
                    textoModalMensagem = "Para vender A prazo tem que selecinar um cliente.";
                    carregandoVenda = false;

                }
                else if (totalPrazo > cliente.LimiteRestante)
                {
                    openCloseModalMensagem();
                    textoModalMensagem = "O limite do cliente ja foi excedido";
                    carregandoVenda = false;
                }
                else
                {
                    await LancarProduto();

                    List<ProdutoVendido> listaDeProdutos = new List<ProdutoVendido>(produtosLancados);
                    List<FormaDePagamento> listaDeFormasDePagamentos = new List<FormaDePagamento>(formasDePagamento);
                    Venda vendaModal = new();
                    vendaModal.Total = total - faltaPagar;
                    vendaModal.Descontos = descontoTotal;
                    vendaModal.Caixa = caixaAtual;
                    vendaModal.IdCliente = cliente.Id;
                    vendaModal.NomeDoCliente = cliente.Nome;
                    vendaModal.IsPago = false;
                    vendaModal.IsPrazo = true;
                    if (faltaPagar > 0) listaDeProdutos.Clear();
                    await VendaServices.AddVendaAsync(vendaModal, listaDeProdutos, listaDeFormasDePagamentos,cliente);
                    abrirModalVenda = false;
                    if (produtosDaComandaSelecionados.Count > 0) await EmabertoServices.RemoveProdutoEmAberto(produtosDaComandaSelecionados, numeroComanda);
                    if (faltaPagar > 0 || produtosDaComandaSelecionados.Count == 0) await EmabertoServices.EditarComanda(numeroComanda, (total - faltaPagar));
                    produtosLancados.Clear();
                    formasDePagamento.Clear();
                    total = 0;
                    descontoTotal = 0;
                    carregandoVenda = false;
                    toastService.ShowSuccess("Venda realizada com SUCESSO!");
                }

            }
            else
            {
                await LancarProduto();

                List<ProdutoVendido> listaDeProdutos = new List<ProdutoVendido>(produtosLancados);
                List<FormaDePagamento> listaDeFormasDePagamentos = new List<FormaDePagamento>(formasDePagamento);
                Venda vendaModal = new();
                vendaModal.Total = total - faltaPagar;
                vendaModal.Descontos = descontoTotal;
                vendaModal.Caixa = caixaAtual;
                if (cliente != null) { vendaModal.NomeDoCliente = cliente.Nome; }
                if (faltaPagar > 0) listaDeProdutos.Clear();
                await VendaServices.AddVendaAsync(vendaModal, listaDeProdutos, listaDeFormasDePagamentos);
                abrirModalVenda = false;
                if (produtosDaComandaSelecionados.Count > 0) await EmabertoServices.RemoveProdutoEmAberto(produtosDaComandaSelecionados, numeroComanda);
                if (faltaPagar > 0 || produtosDaComandaSelecionados.Count == 0) await EmabertoServices.EditarComanda(numeroComanda, (total - faltaPagar));
                produtosLancados.Clear();
                formasDePagamento.Clear();
                total = 0;
                descontoTotal = 0;
                carregandoVenda = false;
                toastService.ShowSuccess("Venda realizada com SUCESSO!");

            }
            EmAbertos = await EmabertoServices.GetAllEmAberto();
            Historicos = await EmabertoServices.GetHistoricos();

        }
    }

    public void AtualizaFaltaPagar()
    {
        faltaPagar = (totalfixo - descontoTotal) + acrecimo;
        decimal novoTotal = 0;
        foreach (var item in formasDePagamento)
        {
            novoTotal += item.Valor == null ? 0 : (decimal)item.Valor;
        }
        faltaPagar -= novoTotal;
    }

    private void CompletaValorDoInput(FormaDePagamento forma, KeyboardEventArgs args)
    {
        if (args.Key == " ")
        {
            forma.Valor = faltaPagar;
        }
    }

    public void RemoveFormaDePagamento(FormaDePagamento forma)
    {
        formasDePagamento.Remove(forma);
        AtualizaFaltaPagar();
    }

    public void AdicionarFormaDePagamento()
    {
        formasDePagamento.Add(new FormaDePagamento());
    }

    private void AcrecimoMetodo(ChangeEventArgs args)
    {
        string valorString = args.Value.ToString();
        total = totalfixo;
        if (modoPorcent)
        {
            if (int.TryParse(valorString, out int valorinteiro))
            {
                decimal acrecimoPercentual = (decimal)valorinteiro / 100;
                acrecimo = acrecimoPercentual * total;
            }
            else acrecimo = 0;
        }
        else
        {
            if (decimal.TryParse(valorString, out decimal valorDecimal))
            {
                acrecimo = valorDecimal;
            }
            else acrecimo = 0;
        }
        AtualizaFaltaPagar();
    }

    private void AlterarDescontoInput(ChangeEventArgs args)
    {
        string valorString = args.Value.ToString();
        total = totalfixo;
        if (modoPorcent)
        {
            if (int.TryParse(valorString, out int valorinteiro))
            {
                decimal descontoPercentual = (decimal)valorinteiro / 100;
                descontoTotal = descontoPercentual * total;
            }
            else descontoTotal = 0;
        }
        else
        {
            if (decimal.TryParse(valorString, out decimal valorDecimal))
            {
                descontoTotal = valorDecimal;
            }
            else descontoTotal = 0;
        }
        AtualizaFaltaPagar();
    }

    public async Task FecharModalDeVenda()
    {
        abrirModalVenda = false;
        total = 0;
        totalfixo = 0;
        faltaPagar = total;
        FecharVerProdutos();
        Historicos = await EmabertoServices.GetHistoricos();
    }

    public async Task AbrirModalDeVenda(Guid id, int numero, bool selecaoProdutos = false)
    {
        Historico = Historicos.Where(x => x.IdEmAberto == id).ToList();
        var totalDaComanda = Historico.Where(x => x.IsEntrada).Sum(x => x.Valor) - Historico.Where(x => !x.IsEntrada).Sum(x => x.Valor);
        verProdutos = false;
        numeroComanda = numero;
        if (config.VendaRapida) { MetodosDePagamentoVendasRapidas(); }
        if (!selecaoProdutos)
        {
            produtosDaComandaSelecionados.Clear();
            produtosDaComanda = await EmabertoServices.GetAllProdutosEmAberto(numero);
            total = totalDaComanda;
            totalfixo = totalDaComanda;
        }
        else
        {
            produtosDaComanda = produtosDaComandaSelecionados;
            total = produtosDaComanda.Sum(x => x.total ?? 0);
            if (total > totalComanda) total = totalComanda;
            totalfixo = total;
        }
        faltaPagar = total;
        abrirModalVenda = true;

        numeroDaComanda = numero;
    }

    public void SelecionarProduto(HashSet<ProdutosEmAberto> items)
    {
        produtosDaComandaSelecionados.Clear();
        produtosDaComandaSelecionados.AddRange(items);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            if (abrirModalVenda)
            {
                await JSRuntime.InvokeVoidAsync("focusElementById", "Dinheiro");
                await ConfirmarVenda();
            }
        }
        else if (e.Key == "F4")
        {

            if (abrirModalVenda  && config.VendaRapida)
            {
                await JSRuntime.InvokeVoidAsync("focusElementById", "Pix");
                formasDePagamento.First(x => x.NomeDoMetodo == "Pix").Valor = faltaPagar;
            }

        }
        else if (e.Key == "F2")
        {
            if (abrirModalVenda  && config.VendaRapida)
            {
                await JSRuntime.InvokeVoidAsync("focusElementById", "Dinheiro");
                formasDePagamento.First(x => x.NomeDoMetodo == "Dinheiro").Valor = faltaPagar;
            }

        }
        else if (e.Key == "Escape")
        {
            FecharModalDeVenda();
            modalDeConfirmacao.Ocultar();
            verHistorico = false;

        }
        else if (e.Key == "F8")
        {
            if (abrirModalVenda  && config.VendaRapida)
            {
                await JSRuntime.InvokeVoidAsync("focusElementById", "Credito");
                formasDePagamento.First(x => x.NomeDoMetodo == "Credito").Valor = faltaPagar;
            }
        }
        else if (e.Key == "F9")
        {
            if (abrirModalVenda &&  config.VendaRapida)
            {
                await JSRuntime.InvokeVoidAsync("focusElementById", "Debito");
                formasDePagamento.First(x => x.NomeDoMetodo == "Debito").Valor = faltaPagar;
            }
        }

    }
    public void MetodosDePagamentoVendasRapidas()
    {
        formasDePagamento.Clear();
        foreach (var item in metodosDePagamento)
        {
            FormaDePagamento forma = new();
            forma.MetodoDePagamentoId = item.Id;
            forma.NomeDoMetodo = item.Nome;
            formasDePagamento.Add(forma);
        }
    }

    public void AbrirModalConfirmacaoDelete(int num)
    {
        numeroComanda = num;
        modalDeConfirmacao.Exibir();
    }

    public async Task BuscarHistorico(Guid Id)
    {
        Historico = Historicos.Where(x => x.IdEmAberto == Id).ToList();
        verHistorico = true;
    }

}
